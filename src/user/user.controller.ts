import {
  Controller,
  Get,
  Post,
  Put,
  Patch,
  Body,
  Param,
  Delete,
  Query,
  ParseIntPipe,
  HttpCode,
  HttpStatus,
  UseGuards,
  UseInterceptors,
  Logger,
  SetMetadata,
  BadRequestException,
  DefaultValuePipe,
  ParseBoolPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { UserService } from './user.service';
import {
  CreateUserDto,
  UpdateUserDto,
  UserQueryDto,
  UserResponseDto,
  UserListResponseDto,
  UserStatsQueryDto,
  UserStatsResponseDto,
  BulkUserOperationDto,
  BulkRestoreUsersDto,
  BulkDeleteResponseDto,
  BulkRestoreResponseDto,
  BulkPermanentDeleteResponseDto,
  BulkUpdateResponseDto,
  BulkUpdateUserDto,
  ChangePasswordDto,
  AdminUserActionDto,
  UserExportDto,
  ForgotPasswordDto,
  ResetPasswordDto,
} from './dto/user.dto';
import {
  CrudPermissions,
  Public,
  RequireOwnership,
} from '../common/decorators/permissions.decorator';
import { EnhancedAuthGuard } from '../common/guards/enhanced-auth.guard';
import { AuditLogInterceptor } from '../common/interceptors/audit-log.interceptor';
import { RateLimitInterceptor } from '../common/interceptors/rate-limit.interceptor';

/**
 * User Controller - REST API Layer
 *
 * Controller n√†y cung c·∫•p REST API endpoints cho User management v·ªõi:
 *
 * üîç SEPARATED READ APIs:
 * - GET /api/users ‚Üí ACTIVE users only (CrudPermissions.Users.Read)
 * - GET /api/users/deleted ‚Üí DELETED users only (CrudPermissions.Users.ViewDeleted)
 * - GET /api/users/stats ‚Üí User statistics (CrudPermissions.Users.Read)
 * - GET /api/users/:id ‚Üí User details (CrudPermissions.Users.Read)
 *
 * ‚úèÔ∏è WRITE OPERATIONS:
 * - POST /api/users ‚Üí Create user (CrudPermissions.Users.Create)
 * - PATCH /api/users/:id ‚Üí Update user (CrudPermissions.Users.Update)
 * - DELETE /api/users/:id ‚Üí Soft delete (CrudPermissions.Users.Delete)
 * - POST /api/users/:id/restore ‚Üí Restore user (CrudPermissions.Users.Restore)
 *
 * üîÑ BULK OPERATIONS:
 * - POST /api/users/bulk/delete ‚Üí Bulk soft delete
 * - POST /api/users/bulk/restore ‚Üí Bulk restore
 * - POST /api/users/bulk/permanent-delete ‚Üí Bulk permanent delete
 * - PUT /api/users/bulk/update ‚Üí Bulk update
 *
 * üîê SECURITY FEATURES:
 * - JWT Authentication required (EnhancedAuthGuard)
 * - Permission-based authorization (@CrudPermissions)
 * - Rate limiting (RateLimitInterceptor)
 * - Input sanitization (SanitizationPipe)
 * - Audit logging (AuditLogInterceptor)
 *
 * üìö API DOCUMENTATION:
 * - Comprehensive Swagger documentation
 * - Request/Response examples
 * - Error response documentation
 * - Permission requirements
 *
 * @version 2.1.0 - Complete API Separation
 * @author PHGroup Development Team
 */
@ApiTags('Users')
@ApiBearerAuth()
@Controller('users')
@UseGuards(EnhancedAuthGuard)
@UseInterceptors(AuditLogInterceptor, RateLimitInterceptor)
export class UserController {
  private readonly logger = new Logger(UserController.name);

  constructor(private readonly userService: UserService) {
    this.logger.log(
      'üöÄ UserController initialized with separated API endpoints',
    );
  }

  // =============================================================================
  // CRUD OPERATIONS
  // =============================================================================

  /**
   * GET /api/users
   * L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang v√† l·ªçc
   */
  @Get()
  @CrudPermissions.Users.Read()
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng',
    description:
      'L·∫•y danh s√°ch ng∆∞·ªùi d√πng v·ªõi kh·∫£ nƒÉng ph√¢n trang, t√¨m ki·∫øm v√† l·ªçc',
  })
  @ApiResponse({
    status: 200,
    description: 'Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    type: UserListResponseDto,
  })
  async findAll(@Query() query: UserQueryDto): Promise<UserListResponseDto> {
    this.logger.log(
      `GET /users - Page: ${query.page}, Limit: ${query.limit}, Search: ${query.search}`,
    );
    return this.userService.findAll(query);
  }

  /**
   * GET /api/users/deleted
   * L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ x√≥a
   */
  @Get('deleted')
  @CrudPermissions.Users.Read()
  @ApiOperation({
    summary: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ x√≥a',
    description: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a m·ªÅm',
  })
  @ApiResponse({
    status: 200,
    description: 'Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ x√≥a ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    type: UserListResponseDto,
  })
  async findDeleted(
    @Query() query: UserQueryDto,
  ): Promise<UserListResponseDto> {
    this.logger.log(`GET /users/deleted - Getting deleted users list`);
    return this.userService.findDeleted(query);
  }

  /**
   * GET /api/users/stats
   * L·∫•y th·ªëng k√™ ng∆∞·ªùi d√πng
   */
  @Get('stats')
  @CrudPermissions.Users.Read()
  @ApiOperation({
    summary: 'L·∫•y th·ªëng k√™ ng∆∞·ªùi d√πng',
    description: 'L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ ng∆∞·ªùi d√πng trong h·ªá th·ªëng',
  })
  @ApiResponse({
    status: 200,
    description: 'Th·ªëng k√™ ng∆∞·ªùi d√πng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    type: UserStatsResponseDto,
  })
  async getUserStats(
    @Query() query: UserStatsQueryDto,
  ): Promise<UserStatsResponseDto> {
    this.logger.log(`GET /users/stats - Getting user statistics`);
    return this.userService.getUserStats(query);
  }

  // =============================================================================
  // BULK OPERATIONS - MUST BE BEFORE :id ROUTES
  // =============================================================================

  /**
   * POST /api/users/bulk/delete
   * Bulk soft delete users
   */
  @Post('bulk/delete')
  @HttpCode(HttpStatus.OK)
  @CrudPermissions.Users.BulkDelete()
  @ApiOperation({
    summary: 'X√≥a m·ªÅm nhi·ªÅu ng∆∞·ªùi d√πng',
    description: 'X√≥a m·ªÅm nhi·ªÅu ng∆∞·ªùi d√πng d·ª±a tr√™n danh s√°ch ID',
  })
  @ApiResponse({
    status: 200,
    description: 'Thao t√°c x√≥a m·ªÅm h√†ng lo·∫°t ho√†n t·∫•t',
    type: BulkDeleteResponseDto,
  })
  async bulkDelete(
    @Body() body: BulkUserOperationDto,
  ): Promise<BulkDeleteResponseDto> {
    this.logger.log(
      `POST /users/bulk/delete - IDs: ${body.userIds.join(', ')}`,
    );
    return this.userService.bulkDelete(body.userIds);
  }

  /**
   * POST /api/users/bulk/permanent-delete
   * X√≥a vƒ©nh vi·ªÖn nhi·ªÅu ng∆∞·ªùi d√πng
   */
  @Post('bulk/permanent-delete')
  @CrudPermissions.Users.PermanentDelete()
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: 'X√≥a vƒ©nh vi·ªÖn nhi·ªÅu ng∆∞·ªùi d√πng',
    description:
      'X√≥a vƒ©nh vi·ªÖn nhi·ªÅu ng∆∞·ªùi d√πng v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan c·ªßa h·ªç.',
  })
  @ApiResponse({
    status: 200,
    description: 'S·ªë ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a vƒ©nh vi·ªÖn th√†nh c√¥ng',
    type: BulkPermanentDeleteResponseDto,
  })
  async bulkPermanentDelete(
    @Body() body: BulkUserOperationDto,
  ): Promise<BulkPermanentDeleteResponseDto> {
    this.logger.log(
      `POST /users/bulk/permanent-delete - IDs: ${body.userIds.join(', ')}`,
    );
    return this.userService.bulkPermanentDelete(body.userIds);
  }

  /**
   * POST /api/users/bulk/restore
   * Kh√¥i ph·ª•c nhi·ªÅu ng∆∞·ªùi d√πng ƒë√£ x√≥a
   */
  @Post('bulk/restore')
  @HttpCode(HttpStatus.OK)
  @CrudPermissions.Users.Restore()
  @ApiOperation({
    summary: 'Kh√¥i ph·ª•c nhi·ªÅu ng∆∞·ªùi d√πng',
    description: 'Kh√¥i ph·ª•c nhi·ªÅu ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a m·ªÅm',
  })
  @ApiResponse({
    status: 200,
    description: 'S·ªë ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng',
    type: BulkRestoreResponseDto,
  })
  async bulkRestore(
    @Body() body: BulkRestoreUsersDto,
  ): Promise<BulkRestoreResponseDto> {
    this.logger.log(
      `POST /users/bulk/restore - Restoring user IDs: ${body.userIds.join(', ')}`,
    );
    return this.userService.bulkRestore(body.userIds);
  }

  /**
   * PUT /api/users/bulk/update
   * C·∫≠p nh·∫≠t nhi·ªÅu ng∆∞·ªùi d√πng
   */
  @Put('bulk/update')
  @HttpCode(HttpStatus.OK)
  @CrudPermissions.Users.FullAccess()
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t h√†ng lo·∫°t ng∆∞·ªùi d√πng',
    description:
      'C·∫≠p nh·∫≠t th√¥ng tin cho nhi·ªÅu ng∆∞·ªùi d√πng c√πng l√∫c, v√≠ d·ª•: thay ƒë·ªïi role',
  })
  @ApiResponse({
    status: 200,
    description: 'Thao t√°c c·∫≠p nh·∫≠t h√†ng lo·∫°t ho√†n t·∫•t',
    type: BulkUpdateResponseDto,
  })
  async bulkUpdate(
    @Body() body: BulkUpdateUserDto,
  ): Promise<BulkUpdateResponseDto> {
    this.logger.log(
      `PUT /users/bulk/update - User IDs: ${body.userIds.join(', ')}`,
    );
    return this.userService.bulkUpdate(body.userIds, body.updateData);
  }

  // =============================================================================
  // SINGLE USER OPERATIONS - AFTER BULK OPERATIONS
  // =============================================================================

  /**
   * GET /api/users/:id
   * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt ng∆∞·ªùi d√πng
   */
  @Get(':id')
  @CrudPermissions.Users.Read()
  @ApiOperation({
    summary: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng theo ID',
  })
  @ApiResponse({
    status: 200,
    description: 'Th√¥ng tin ng∆∞·ªùi d√πng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
  })
  async findOne(
    @Param('id', ParseIntPipe) id: number,
    @Query('includeDeleted', new DefaultValuePipe(false), ParseBoolPipe)
    includeDeleted: boolean,
  ): Promise<UserResponseDto> {
    this.logger.log(
      `GET /users/${id} - Getting user details, includeDeleted: ${includeDeleted}`,
    );
    return this.userService.findOne(id, includeDeleted);
  }

  /**
   * GET /api/users/email/:email
   * T√¨m ng∆∞·ªùi d√πng theo email
   */
  @Get('email/:email')
  @CrudPermissions.Users.Read()
  @ApiOperation({
    summary: 'T√¨m ng∆∞·ªùi d√πng theo email',
    description: 'L·∫•y th√¥ng tin ng∆∞·ªùi d√πng d·ª±a tr√™n ƒë·ªãa ch·ªâ email',
  })
  @ApiResponse({
    status: 200,
    description: 'Th√¥ng tin ng∆∞·ªùi d√πng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y',
  })
  async findByEmail(@Param('email') email: string): Promise<UserResponseDto> {
    this.logger.log(`GET /users/email/${email} - Finding user by email`);
    return this.userService.findByEmail(email);
  }

  /**
   * POST /api/users
   * T·∫°o ng∆∞·ªùi d√πng m·ªõi
   */
  @Post()
  @CrudPermissions.Users.Create()
  @ApiOperation({
    summary: 'T·∫°o ng∆∞·ªùi d√πng m·ªõi',
    description:
      'T·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng v·ªõi th√¥ng tin c∆° b·∫£n v√† t√πy ch·ªçn profile',
  })
  @ApiResponse({
    status: 201,
    description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 400,
    description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
  })
  @ApiResponse({
    status: 409,
    description: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
  })
  async create(@Body() createUserDto: CreateUserDto): Promise<UserResponseDto> {
    this.logger.log(`POST /users - Creating new user: ${createUserDto.email}`);
    return this.userService.create(createUserDto);
  }

  /**
   * PUT /api/users/:id
   * C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
   */
  @Patch(':id')
  @CrudPermissions.Users.Update()
  @ApiOperation({
    summary: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng',
    description:
      'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng, bao g·ªìm c·∫£ profile n·∫øu c√≥',
  })
  @ApiResponse({
    status: 200,
    description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
  })
  @ApiResponse({
    status: 409,
    description: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi d√πng kh√°c',
  })
  async update(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateUserDto: UpdateUserDto,
  ): Promise<UserResponseDto> {
    this.logger.log(`PUT /users/${id} - Updating user`);
    return this.userService.update(id, updateUserDto);
  }

  /**
   * POST /api/users/:id/change-password
   * Thay ƒë·ªïi m·∫≠t kh·∫©u
   */
  @Post(':id/change-password')
  @HttpCode(HttpStatus.NO_CONTENT)
  @CrudPermissions.Users.Update()
  @ApiOperation({
    summary: 'Thay ƒë·ªïi m·∫≠t kh·∫©u',
    description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u cho m·ªôt ng∆∞·ªùi d√πng',
  })
  @ApiResponse({
    status: 204,
    description: 'M·∫≠t kh·∫©u ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng',
  })
  @ApiResponse({
    status: 400,
    description: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng ho·∫∑c m·∫≠t kh·∫©u m·ªõi kh√¥ng h·ª£p l·ªá',
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
  })
  async changePassword(
    @Param('id', ParseIntPipe) id: number,
    @Body() changePasswordDto: ChangePasswordDto,
  ): Promise<void> {
    this.logger.log(`POST /users/${id}/change-password - Changing password`);
    return this.userService.changePassword(id, changePasswordDto);
  }

  /**
   * DELETE /api/users/:id
   * X√≥a m·ªÅm ng∆∞·ªùi d√πng
   */
  @Delete(':id')
  @CrudPermissions.Users.Delete()
  @ApiOperation({
    summary: 'X√≥a ng∆∞·ªùi d√πng',
    description:
      'ƒê√°nh d·∫•u ng∆∞·ªùi d√πng l√† ƒë√£ x√≥a (soft delete). D·ªØ li·ªáu v·∫´n c√≤n trong DB nh∆∞ng kh√¥ng th·ªÉ truy c·∫≠p.',
  })
  @HttpCode(HttpStatus.NO_CONTENT)
  async remove(@Param('id', ParseIntPipe) id: number): Promise<void> {
    this.logger.log(`DELETE /users/${id} - Soft deleting user`);
    return this.userService.remove(id);
  }

  /**
   * POST /api/users/:id/restore
   * Kh√¥i ph·ª•c ng∆∞·ªùi d√πng ƒë√£ x√≥a
   */
  @Post(':id/restore')
  @CrudPermissions.Users.Restore()
  @ApiOperation({
    summary: 'Kh√¥i ph·ª•c ng∆∞·ªùi d√πng',
    description: 'Kh√¥i ph·ª•c m·ªôt ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a m·ªÅm',
  })
  @ApiResponse({
    status: 200,
    description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë√£ x√≥a',
  })
  async restore(
    @Param('id', ParseIntPipe) id: number,
  ): Promise<UserResponseDto> {
    this.logger.log(`POST /users/${id}/restore - Kh√¥i ph·ª•c c√° nh√¢n`);
    return this.userService.restore(id);
  }

  /**
   * DELETE /api/users/:id/permanent
   * X√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng
   */
  @Delete(':id/permanent')
  @CrudPermissions.Users.PermanentDelete()
  @ApiOperation({
    summary: 'X√≥a vƒ©nh vi·ªÖn ng∆∞·ªùi d√πng',
    description: 'X√≥a vƒ©nh vi·ªÖn m·ªôt ng∆∞·ªùi d√πng (kh√¥ng th·ªÉ kh√¥i ph·ª•c)',
  })
  @ApiResponse({
    status: 204,
    description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c x√≥a vƒ©nh vi·ªÖn',
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
  })
  async permanentDelete(@Param('id', ParseIntPipe) id: number): Promise<void> {
    this.logger.log(`DELETE /users/${id}/permanent - X√≥a vƒ©nh vi·ªÖn`);
    return this.userService.permanentDelete(id);
  }

  /**
   * POST /api/users/:id/admin-action
   * Th·ª±c hi·ªán h√†nh ƒë·ªông qu·∫£n tr·ªã tr√™n ng∆∞·ªùi d√πng
   */
  @Post(':id/admin-action')
  @CrudPermissions.Users.Update()
  @ApiOperation({
    summary: 'Th·ª±c hi·ªán h√†nh ƒë·ªông qu·∫£n tr·ªã tr√™n ng∆∞·ªùi d√πng',
    description:
      'Th·ª±c hi·ªán c√°c h√†nh ƒë·ªông nh∆∞ suspend, activate, verify email...',
  })
  @ApiResponse({
    status: 200,
    description: 'H√†nh ƒë·ªông qu·∫£n tr·ªã ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng',
    type: UserResponseDto,
  })
  async adminAction(
    @Param('id', ParseIntPipe) id: number,
    @Body() actionDto: AdminUserActionDto,
  ): Promise<UserResponseDto> {
    this.logger.log(
      `POST /users/${id}/admin-action - Action: ${actionDto.action}`,
    );
    return this.userService.adminAction(id, actionDto);
  }

  // =============================================================================
  // PASSWORD RESET FLOW
  // =============================================================================

  /**
   * POST /api/users/forgot-password
   * Y√™u c·∫ßu reset m·∫≠t kh·∫©u
   */
  @Post('forgot-password')
  @Public()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'Qu√™n m·∫≠t kh·∫©u',
    description: 'G·ª≠i y√™u c·∫ßu reset m·∫≠t kh·∫©u cho m·ªôt email',
  })
  @ApiResponse({
    status: 204,
    description: 'Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (email s·∫Ω ƒë∆∞·ª£c g·ª≠i n·∫øu t·ªìn t·∫°i)',
  })
  async forgotPassword(
    @Body() forgotPasswordDto: ForgotPasswordDto,
  ): Promise<void> {
    this.logger.log(
      `POST /users/forgot-password - Email: ${forgotPasswordDto.email}`,
    );
    return this.userService.forgotPassword(forgotPasswordDto);
  }

  /**
   * POST /api/users/reset-password
   * Reset m·∫≠t kh·∫©u b·∫±ng token
   */
  @Post('reset-password')
  @Public()
  @HttpCode(HttpStatus.NO_CONTENT)
  @ApiOperation({
    summary: 'Reset m·∫≠t kh·∫©u',
    description: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng token ƒë√£ nh·∫≠n ƒë∆∞·ª£c qua email',
  })
  @ApiResponse({
    status: 204,
    description: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng',
  })
  async resetPassword(
    @Body() resetPasswordDto: ResetPasswordDto,
  ): Promise<void> {
    this.logger.log(`POST /users/reset-password - B·∫Øt ƒë·∫ßu qu√° tr√¨nh reset`);
    return this.userService.resetPassword(resetPasswordDto);
  }

  // =============================================================================
  // HEALTH CHECK
  // =============================================================================

  /**
   * GET /api/users/health
   * Ki·ªÉm tra "s·ª©c kh·ªèe" c·ªßa controller
   */
  @Get('health')
  @Public()
  @ApiOperation({
    summary: 'Ki·ªÉm tra s·ª©c kh·ªèe',
    description: 'Ki·ªÉm tra xem User service c√≥ ƒëang ho·∫°t ƒë·ªông hay kh√¥ng',
  })
  async healthCheck(): Promise<{ status: string; timestamp: string }> {
    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
    };
  }
}
