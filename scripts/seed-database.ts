import { PrismaClient, Prisma } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { faker } from '@faker-js/faker';
import { PERMISSIONS } from '../src/common/constants/permissions.constants';

const prisma = new PrismaClient();

async function main() {
	console.log('üóëÔ∏è  X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©...');
	
	// X√≥a d·ªØ li·ªáu theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key
	await prisma.blogComment.deleteMany();
	await prisma.blogBookmark.deleteMany();
	await prisma.blogLike.deleteMany();
	await prisma.blog.deleteMany();
	await prisma.jobApplication.deleteMany();
	await prisma.recruitment.deleteMany();
	await prisma.contactSubmission.deleteMany();
	await prisma.newsletterSubscription.deleteMany();
	await prisma.service.deleteMany();
	await prisma.media.deleteMany();
	await prisma.userProfile.deleteMany();
	await prisma.userSession.deleteMany();
	await prisma.session.deleteMany();
	await prisma.account.deleteMany();
	await prisma.user.deleteMany();
	await prisma.role.deleteMany();
	await prisma.permission.deleteMany();
	await prisma.tag.deleteMany();
	await prisma.status.deleteMany();
	await prisma.category.deleteMany();

	console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©');

	console.log('üìä T·∫°o Statuses...');
	const statusesToCreate = [
		// Blog Statuses
		{ name: 'Published', description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n.', type: 'BLOG' },
		{ name: 'Draft', description: 'B√†i vi·∫øt l√† b·∫£n nh√°p.', type: 'BLOG' },
		{ name: 'Archived', description: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ.', type: 'BLOG' },
		// Recruitment Statuses
		{ name: 'Open', description: 'Tin tuy·ªÉn d·ª•ng ƒëang m·ªü.', type: 'RECRUITMENT' },
		{ name: 'Closed', description: 'Tin tuy·ªÉn d·ª•ng ƒë√£ ƒë√≥ng.', type: 'RECRUITMENT' },
		// General Statuses
		{ name: 'Active', description: 'ƒê·ªëi t∆∞·ª£ng ƒëang ho·∫°t ƒë·ªông.', type: 'GENERAL' },
		{ name: 'Inactive', description: 'ƒê·ªëi t∆∞·ª£ng kh√¥ng ho·∫°t ƒë·ªông.', type: 'GENERAL' },
		{ name: 'Pending', description: 'ƒê·ªëi t∆∞·ª£ng ƒëang ch·ªù x·ª≠ l√Ω.', type: 'GENERAL' },
	];

	await prisma.status.createMany({
		data: statusesToCreate,
		skipDuplicates: true,
	});
	console.log(`‚úÖ ƒê√£ t·∫°o ${statusesToCreate.length} statuses.`);

	console.log('üîë T·∫°o Permissions...');

	// Generate permissions from the constants file to ensure consistency
	const permissionsToCreate = Object.values(PERMISSIONS)
		.flatMap(group => Object.values(group))
		.map(permissionName => {
			const [resource, action] = (permissionName as string).split(':');
			const resourceTitle = resource
				.replace(/_/g, ' ')
				.replace(/\b\w/g, l => l.toUpperCase());
			const actionTitle = action.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

			let description = `Quy·ªÅn ${actionTitle.toLowerCase()} ${resourceTitle.toLowerCase()}`;
			if (action === 'full_access') {
				description = `Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô ${resourceTitle.toLowerCase()}`;
			}

			return {
				name: permissionName as string,
				description: description,
				metaTitle: `Quy·ªÅn ${actionTitle} ${resourceTitle}`,
			};
		});

	const permissions = await prisma.permission.createMany({
		data: permissionsToCreate,
		skipDuplicates: true,
	});

	console.log(`‚úÖ ƒê√£ t·∫°o ${permissions.count} permissions`);
	console.log('üëë T·∫°o Roles...');

	// Create Super Admin Role
	const superAdminRole = await prisma.role.create({
		data: {
			name: 'Super Admin',
			description: 'Qu·∫£n tr·ªã vi√™n c·∫•p cao nh·∫•t v·ªõi to√†n quy·ªÅn h·ªá th·ªëng.',
			permissions: {
				connect: [{ name: PERMISSIONS.ADMIN.FULL_ACCESS }],
			},
		},
	});

	// Create Admin Role
	const adminRole = await prisma.role.create({
		data: {
			name: 'Admin',
			description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v·ªõi quy·ªÅn qu·∫£n l√Ω cao.',
			permissions: {
				connect: [
					{ name: PERMISSIONS.USERS.FULL_ACCESS },
					{ name: PERMISSIONS.ROLES.FULL_ACCESS },
					{ name: PERMISSIONS.BLOGS.FULL_ACCESS },
					{ name: PERMISSIONS.CONTENT_TYPES.FULL_ACCESS },
					{ name: PERMISSIONS.MEDIA.FULL_ACCESS },
					{ name: PERMISSIONS.RECRUITMENT.FULL_ACCESS },
					{ name: PERMISSIONS.SETTINGS.FULL_ACCESS },
				],
			},
		},
	});

	// Create Editor Role
	const editorRole = await prisma.role.create({
		data: {
			name: 'Editor',
			description: 'Bi√™n t·∫≠p vi√™n qu·∫£n l√Ω n·ªôi dung.',
			permissions: {
				connect: [
					{ name: PERMISSIONS.BLOGS.CREATE },
					{ name: PERMISSIONS.BLOGS.READ },
					{ name: PERMISSIONS.BLOGS.UPDATE },
					{ name: PERMISSIONS.BLOGS.DELETE },
					{ name: PERMISSIONS.CONTENT_TYPES.CREATE },
					{ name: PERMISSIONS.CONTENT_TYPES.READ },
					{ name: PERMISSIONS.MEDIA.CREATE },
					{ name: PERMISSIONS.MEDIA.READ },
					{ name: PERMISSIONS.MEDIA.UPDATE },
					{ name: PERMISSIONS.MEDIA.DELETE },
				],
			},
		},
	});

	// Create HR Manager Role
	const hrManagerRole = await prisma.role.create({
		data: {
			name: 'HR Manager',
			description: 'Qu·∫£n l√Ω nh√¢n s·ª± chuy√™n v·ªÅ tuy·ªÉn d·ª•ng.',
			permissions: {
				connect: [
					{ name: PERMISSIONS.RECRUITMENT.FULL_ACCESS },
					{ name: PERMISSIONS.USERS.READ }, // To view candidate profiles
				],
			},
		},
	});

	// Create Client Role
	const clientRole = await prisma.role.create({
		data: {
			name: 'Client',
			description: 'Ng∆∞·ªùi d√πng cu·ªëi c√≥ quy·ªÅn t∆∞∆°ng t√°c v·ªõi c√°c t√≠nh nƒÉng c√¥ng khai.',
			permissions: {
				connect: [
					{ name: PERMISSIONS.BLOGS.READ },
					{ name: PERMISSIONS.BLOGS.LIKE },
					{ name: PERMISSIONS.BLOGS.BOOKMARK },
					{ name: PERMISSIONS.COMMENTS.CREATE },
					{ name: PERMISSIONS.COMMENTS.READ },
					{ name: PERMISSIONS.COMMENTS.UPDATE },
					{ name: PERMISSIONS.COMMENTS.DELETE },
					{ name: PERMISSIONS.RECRUITMENT.APPLY },
				],
			},
		},
	});

	console.log(`‚úÖ ƒê√£ t·∫°o 5 roles: Super Admin, Admin, Editor, HR Manager, Client`);

	console.log('üë§ T·∫°o User ch√≠nh...');

	// Hash password for main user
	const hashedPassword = await bcrypt.hash('RachelCu.26112020', 10);

	// Create main user
	const mainUser = await prisma.user.create({
		data: {
			email: 'thang.ph2146@gmail.com',
			name: 'Ph·∫°m Ho√†ng Th·∫Øng',
			hashedPassword: hashedPassword,
			emailVerified: new Date(),
			roleId: superAdminRole.id,
			profile: {
				create: {
					bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v√† nh√† ph√°t tri·ªÉn full-stack.',
					socialLinks: {
						github: 'https://github.com/thangph',
						linkedin: 'https://linkedin.com/in/thangph',
						facebook: 'https://facebook.com/thangph2146',
					},
				},
			},
		},
	});

	console.log(`‚úÖ ƒê√£ t·∫°o user ch√≠nh: ${mainUser.email}`);

	console.log('üë§ T·∫°o 20 user test...');
	const testUsers: Prisma.UserCreateArgs[] = [];
	const testPassword = await bcrypt.hash('password123', 10);

	// Use the 'editorRole' created earlier, no need to query again.
	if (!editorRole) {
		console.error('‚ùå Kh√¥ng t√¨m th·∫•y vai tr√≤ "Editor". B·ªè qua vi·ªác t·∫°o ng∆∞·ªùi d√πng th·ª≠ nghi·ªám.');
	} else {
		for (let i = 0; i < 20; i++) {
			const firstName = faker.person.firstName();
			const lastName = faker.person.lastName();
			const email = faker.internet.email({ firstName, lastName, provider: 'phgroup.dev' });

			testUsers.push({
				data: {
					email: email,
					name: `${firstName} ${lastName}`,
					hashedPassword: testPassword,
					emailVerified: new Date(),
					roleId: clientRole.id, // Assign client role to test users
					profile: {
						create: {
							bio: faker.person.bio(),
						},
					},
				},
			});
		}
		
		for (const userData of testUsers) {
			await prisma.user.create(userData);
		}

		console.log('‚úÖ ƒê√£ t·∫°o 20 user test.');
	}

	console.log('üåü Ho√†n th√†nh seed database!');
	console.log('\nüìã T√≥m t·∫Øt d·ªØ li·ªáu ƒë√£ t·∫°o:');
	console.log(`- ${permissions.count} Permissions`);
	console.log(`- 5 Roles (Super Admin, Admin, Editor, HR Manager, Client)`);
	console.log(`- 21 Users (1 Super Admin + 20 Test Users)`);
	console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
	console.log('üéØ SUPER ADMIN:');
	console.log('  üìß Email: thang.ph2146@gmail.com');
	console.log('  üîí Password: RachelCu.26112020');
	console.log('\nüéØ TEST USERS:');
	console.log('  üìß Email: testuser1@phgroup.com - testuser20@phgroup.com');
	console.log('  üîí Password: password123');
}

main()
	.catch(e => {
		console.error('‚ùå L·ªói khi seed database:', e);
		process.exit(1);
	})
	.finally(async () => {
		await prisma.$disconnect();
	});
