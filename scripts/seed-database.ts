import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üóëÔ∏è  X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©...');
  
  // X√≥a d·ªØ li·ªáu theo th·ª© t·ª± ƒë·ªÉ tr√°nh l·ªói foreign key
  await prisma.blogComment.deleteMany();
  await prisma.blogBookmark.deleteMany();
  await prisma.blogLike.deleteMany();
  await prisma.blog.deleteMany();
  await prisma.jobApplication.deleteMany();
  await prisma.recruitment.deleteMany();
  await prisma.contactSubmission.deleteMany();
  await prisma.newsletterSubscription.deleteMany();
  await prisma.service.deleteMany();
  await prisma.media.deleteMany();
  await prisma.userProfile.deleteMany();
  await prisma.userSession.deleteMany();
  await prisma.session.deleteMany();
  await prisma.account.deleteMany();
  await prisma.user.deleteMany();
  await prisma.role.deleteMany();
  await prisma.permission.deleteMany();
  await prisma.tag.deleteMany();
  await prisma.status.deleteMany();
  await prisma.category.deleteMany();

  console.log('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©');
  console.log('üîë T·∫°o Permissions...');
  
  // T·∫°o permissions d·ª±a tr√™n schema v√† API endpoints
  const permissions = await Promise.all([
    // ========== SYSTEM ADMIN PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'admin:full_access',
        description: 'Quy·ªÅn qu·∫£n tr·ªã to√†n b·ªô h·ªá th·ªëng',
        metaTitle: 'Quy·ªÅn qu·∫£n tr·ªã to√†n b·ªô',
        metaDescription: 'Quy·ªÅn cao nh·∫•t, c√≥ th·ªÉ truy c·∫≠p m·ªçi ch·ª©c nƒÉng c·ªßa h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'admin:system_settings',
        description: 'Qu·∫£n l√Ω c√†i ƒë·∫∑t h·ªá th·ªëng',
        metaTitle: 'Quy·ªÅn c√†i ƒë·∫∑t h·ªá th·ªëng',
        metaDescription: 'Cho ph√©p thay ƒë·ªïi c√†i ƒë·∫∑t c·∫•u h√¨nh h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'admin:view_logs',
        description: 'Xem logs h·ªá th·ªëng',
        metaTitle: 'Quy·ªÅn xem logs',
        metaDescription: 'Cho ph√©p xem nh·∫≠t k√Ω ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'admin:manage_sessions',
        description: 'Qu·∫£n l√Ω phi√™n ƒëƒÉng nh·∫≠p',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω sessions',
        metaDescription: 'Cho ph√©p qu·∫£n l√Ω v√† ki·ªÉm so√°t phi√™n ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'admin:maintenance_mode',
        description: 'B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨',
        metaTitle: 'Quy·ªÅn ch·∫ø ƒë·ªô b·∫£o tr√¨',
        metaDescription: 'Cho ph√©p b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨ h·ªá th·ªëng'
      }
    }),

    // ========== USER MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'users:create',
        description: 'T·∫°o ng∆∞·ªùi d√πng m·ªõi',
        metaTitle: 'Quy·ªÅn t·∫°o ng∆∞·ªùi d√πng',
        metaDescription: 'Cho ph√©p t·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:read',
        description: 'Xem th√¥ng tin ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn xem ng∆∞·ªùi d√πng',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:update',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a ng∆∞·ªùi d√πng',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n v√† c√†i ƒë·∫∑t ng∆∞·ªùi d√πng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:delete',
        description: 'X√≥a ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn x√≥a ng∆∞·ªùi d√πng',
        metaDescription: 'Cho ph√©p x√≥a t√†i kho·∫£n ng∆∞·ªùi d√πng kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:manage_all',
        description: 'Qu·∫£n l√Ω to√†n b·ªô ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô ng∆∞·ªùi d√πng',
        metaDescription: 'Quy·ªÅn cao nh·∫•t trong qu·∫£n l√Ω ng∆∞·ªùi d√πng, bao g·ªìm c·∫£ admin kh√°c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:view_profile',
        description: 'Xem h·ªì s∆° ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn xem h·ªì s∆°',
        metaDescription: 'Cho ph√©p xem th√¥ng tin h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng kh√°c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:update_own_profile',
        description: 'C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n',
        metaTitle: 'Quy·ªÅn c·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n',
        metaDescription: 'Cho ph√©p ng∆∞·ªùi d√πng c·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° c·ªßa ch√≠nh m√¨nh'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:change_password',
        description: 'ƒê·ªïi m·∫≠t kh·∫©u',
        metaTitle: 'Quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u',
        metaDescription: 'Cho ph√©p ng∆∞·ªùi d√πng thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ch√≠nh m√¨nh'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:reset_password',
        description: 'Reset m·∫≠t kh·∫©u ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn reset m·∫≠t kh·∫©u',
        metaDescription: 'Cho ph√©p reset m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng kh√°c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'users:impersonate',
        description: 'ƒêƒÉng nh·∫≠p thay ng∆∞·ªùi d√πng kh√°c',
        metaTitle: 'Quy·ªÅn impersonate',
        metaDescription: 'Cho ph√©p ƒëƒÉng nh·∫≠p v·ªõi t∆∞ c√°ch ng∆∞·ªùi d√πng kh√°c ƒë·ªÉ debug'
      }
    }),

    // ========== ROLE MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'roles:create',
        description: 'T·∫°o vai tr√≤ m·ªõi',
        metaTitle: 'Quy·ªÅn t·∫°o vai tr√≤',
        metaDescription: 'Cho ph√©p t·∫°o c√°c vai tr√≤ v√† ph√¢n quy·ªÅn m·ªõi'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'roles:read',
        description: 'Xem th√¥ng tin vai tr√≤',
        metaTitle: 'Quy·ªÅn xem vai tr√≤',
        metaDescription: 'Cho ph√©p xem danh s√°ch vai tr√≤ v√† quy·ªÅn h·∫°n'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'roles:update',
        description: 'C·∫≠p nh·∫≠t vai tr√≤',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a vai tr√≤',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin v√† quy·ªÅn h·∫°n c·ªßa vai tr√≤'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'roles:delete',
        description: 'X√≥a vai tr√≤',
        metaTitle: 'Quy·ªÅn x√≥a vai tr√≤',
        metaDescription: 'Cho ph√©p x√≥a vai tr√≤ kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'roles:assign_permissions',
        description: 'G√°n quy·ªÅn cho vai tr√≤',
        metaTitle: 'Quy·ªÅn g√°n permissions',
        metaDescription: 'Cho ph√©p g√°n/b·ªè g√°n quy·ªÅn h·∫°n cho c√°c vai tr√≤'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'roles:assign_to_users',
        description: 'G√°n vai tr√≤ cho ng∆∞·ªùi d√πng',
        metaTitle: 'Quy·ªÅn g√°n vai tr√≤',
        metaDescription: 'Cho ph√©p g√°n vai tr√≤ cho ng∆∞·ªùi d√πng'
      }
    }),

    // ========== PERMISSION MANAGEMENT ==========
    prisma.permission.create({
      data: {
        name: 'permissions:read',
        description: 'Xem danh s√°ch quy·ªÅn h·∫°n',
        metaTitle: 'Quy·ªÅn xem permissions',
        metaDescription: 'Cho ph√©p xem t·∫•t c·∫£ quy·ªÅn h·∫°n trong h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'permissions:manage',
        description: 'Qu·∫£n l√Ω quy·ªÅn h·∫°n h·ªá th·ªëng',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω permissions',
        metaDescription: 'Cho ph√©p t·∫°o, s·ª≠a, x√≥a quy·ªÅn h·∫°n trong h·ªá th·ªëng'
      }
    }),

    // ========== BLOG MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'blogs:create',
        description: 'T·∫°o b√†i vi·∫øt blog',
        metaTitle: 'Quy·ªÅn t·∫°o blog',
        metaDescription: 'Cho ph√©p t·∫°o v√† vi·∫øt b√†i blog m·ªõi'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:read',
        description: 'Xem b√†i vi·∫øt blog',
        metaTitle: 'Quy·ªÅn xem blog',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† n·ªôi dung b√†i blog'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:update',
        description: 'C·∫≠p nh·∫≠t b√†i vi·∫øt blog',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a blog',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a n·ªôi dung v√† th√¥ng tin b√†i blog'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:delete',
        description: 'X√≥a b√†i vi·∫øt blog',
        metaTitle: 'Quy·ªÅn x√≥a blog',
        metaDescription: 'Cho ph√©p x√≥a b√†i vi·∫øt blog kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:publish',
        description: 'Xu·∫•t b·∫£n b√†i vi·∫øt',
        metaTitle: 'Quy·ªÅn xu·∫•t b·∫£n blog',
        metaDescription: 'Cho ph√©p xu·∫•t b·∫£n b√†i vi·∫øt ƒë·ªÉ hi·ªÉn th·ªã c√¥ng khai'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:unpublish',
        description: 'H·ªßy xu·∫•t b·∫£n b√†i vi·∫øt',
        metaTitle: 'Quy·ªÅn h·ªßy xu·∫•t b·∫£n blog',
        metaDescription: 'Cho ph√©p h·ªßy xu·∫•t b·∫£n b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c√¥ng khai'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:manage_all',
        description: 'Qu·∫£n l√Ω to√†n b·ªô blog',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô blog',
        metaDescription: 'Quy·ªÅn cao nh·∫•t trong qu·∫£n l√Ω blog, bao g·ªìm c·∫£ blog c·ªßa ng∆∞·ªùi kh√°c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:moderate',
        description: 'Ki·ªÉm duy·ªát b√†i vi·∫øt',
        metaTitle: 'Quy·ªÅn ki·ªÉm duy·ªát blog',
        metaDescription: 'Cho ph√©p ki·ªÉm duy·ªát v√† ph√™ duy·ªát b√†i vi·∫øt tr∆∞·ªõc khi xu·∫•t b·∫£n'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:view_drafts',
        description: 'Xem b√†i vi·∫øt nh√°p',
        metaTitle: 'Quy·ªÅn xem b·∫£n nh√°p',
        metaDescription: 'Cho ph√©p xem c√°c b√†i vi·∫øt ƒëang ·ªü tr·∫°ng th√°i nh√°p'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'blogs:schedule',
        description: 'L√™n l·ªãch xu·∫•t b·∫£n',
        metaTitle: 'Quy·ªÅn l√™n l·ªãch blog',
        metaDescription: 'Cho ph√©p l√™n l·ªãch t·ª± ƒë·ªông xu·∫•t b·∫£n b√†i vi·∫øt'
      }
    }),

    // ========== CATEGORY MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'categories:create',
        description: 'T·∫°o danh m·ª•c',
        metaTitle: 'Quy·ªÅn t·∫°o danh m·ª•c',
        metaDescription: 'Cho ph√©p t·∫°o danh m·ª•c m·ªõi cho blog v√† d·ªãch v·ª•'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'categories:read',
        description: 'Xem danh m·ª•c',
        metaTitle: 'Quy·ªÅn xem danh m·ª•c',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt danh m·ª•c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'categories:update',
        description: 'C·∫≠p nh·∫≠t danh m·ª•c',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a danh m·ª•c',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin v√† c·∫•u tr√∫c danh m·ª•c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'categories:delete',
        description: 'X√≥a danh m·ª•c',
        metaTitle: 'Quy·ªÅn x√≥a danh m·ª•c',
        metaDescription: 'Cho ph√©p x√≥a danh m·ª•c kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'categories:manage_hierarchy',
        description: 'Qu·∫£n l√Ω c√¢y danh m·ª•c',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω c√¢y danh m·ª•c',
        metaDescription: 'Cho ph√©p s·∫Øp x·∫øp v√† qu·∫£n l√Ω c·∫•u tr√∫c ph√¢n c·∫•p danh m·ª•c'
      }
    }),

    // ========== TAG MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'tags:create',
        description: 'T·∫°o th·∫ª tag',
        metaTitle: 'Quy·ªÅn t·∫°o tag',
        metaDescription: 'Cho ph√©p t·∫°o th·∫ª tag m·ªõi ƒë·ªÉ g·∫Øn cho b√†i vi·∫øt'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'tags:read',
        description: 'Xem th·∫ª tag',
        metaTitle: 'Quy·ªÅn xem tag',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† th√¥ng tin chi ti·∫øt th·∫ª tag'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'tags:update',
        description: 'C·∫≠p nh·∫≠t th·∫ª tag',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a tag',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin th·∫ª tag'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'tags:delete',
        description: 'X√≥a th·∫ª tag',
        metaTitle: 'Quy·ªÅn x√≥a tag',
        metaDescription: 'Cho ph√©p x√≥a th·∫ª tag kh·ªèi h·ªá th·ªëng'
      }
    }),

    // ========== MEDIA MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'media:upload',
        description: 'T·∫£i l√™n media',
        metaTitle: 'Quy·ªÅn t·∫£i l√™n media',
        metaDescription: 'Cho ph√©p t·∫£i l√™n h√¨nh ·∫£nh v√† file media'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'media:read',
        description: 'Xem media',
        metaTitle: 'Quy·ªÅn xem media',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt file media'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'media:update',
        description: 'C·∫≠p nh·∫≠t media',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a media',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin file media'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'media:delete',
        description: 'X√≥a media',
        metaTitle: 'Quy·ªÅn x√≥a media',
        metaDescription: 'Cho ph√©p x√≥a file media kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'media:manage_all',
        description: 'Qu·∫£n l√Ω to√†n b·ªô media',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô media',
        metaDescription: 'Quy·ªÅn cao nh·∫•t trong qu·∫£n l√Ω media, bao g·ªìm c·∫£ media c·ªßa ng∆∞·ªùi kh√°c'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'media:organize',
        description: 'T·ªï ch·ª©c th∆∞ vi·ªán media',
        metaTitle: 'Quy·ªÅn t·ªï ch·ª©c media',
        metaDescription: 'Cho ph√©p t·ªï ch·ª©c, ph√¢n lo·∫°i file trong th∆∞ vi·ªán media'
      }
    }),

    // ========== COMMENT MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'comments:create',
        description: 'T·∫°o b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn t·∫°o b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p t·∫°o b√¨nh lu·∫≠n cho b√†i vi·∫øt'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'comments:read',
        description: 'Xem b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn xem b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† n·ªôi dung b√¨nh lu·∫≠n'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'comments:update',
        description: 'C·∫≠p nh·∫≠t b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a n·ªôi dung b√¨nh lu·∫≠n'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'comments:delete',
        description: 'X√≥a b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn x√≥a b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p x√≥a b√¨nh lu·∫≠n kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'comments:moderate',
        description: 'Ki·ªÉm duy·ªát b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn ki·ªÉm duy·ªát b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p ki·ªÉm duy·ªát v√† ph√™ duy·ªát b√¨nh lu·∫≠n'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'comments:approve',
        description: 'Ph√™ duy·ªát b√¨nh lu·∫≠n',
        metaTitle: 'Quy·ªÅn ph√™ duy·ªát b√¨nh lu·∫≠n',
        metaDescription: 'Cho ph√©p ph√™ duy·ªát b√¨nh lu·∫≠n ƒë·ªÉ hi·ªÉn th·ªã c√¥ng khai'
      }
    }),

    // ========== RECRUITMENT MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'recruitment:create',
        description: 'T·∫°o tin tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn t·∫°o tin tuy·ªÉn d·ª•ng',
        metaDescription: 'Cho ph√©p t·∫°o tin tuy·ªÉn d·ª•ng m·ªõi'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:read',
        description: 'Xem tin tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn xem tin tuy·ªÉn d·ª•ng',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt tin tuy·ªÉn d·ª•ng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:update',
        description: 'C·∫≠p nh·∫≠t tin tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a tin tuy·ªÉn d·ª•ng',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin tin tuy·ªÉn d·ª•ng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:delete',
        description: 'X√≥a tin tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn x√≥a tin tuy·ªÉn d·ª•ng',
        metaDescription: 'Cho ph√©p x√≥a tin tuy·ªÉn d·ª•ng kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:publish',
        description: 'Xu·∫•t b·∫£n tin tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn xu·∫•t b·∫£n tin tuy·ªÉn d·ª•ng',
        metaDescription: 'Cho ph√©p xu·∫•t b·∫£n tin tuy·ªÉn d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã c√¥ng khai'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:manage_all',
        description: 'Qu·∫£n l√Ω to√†n b·ªô tuy·ªÉn d·ª•ng',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô tuy·ªÉn d·ª•ng',
        metaDescription: 'Quy·ªÅn cao nh·∫•t trong qu·∫£n l√Ω tuy·ªÉn d·ª•ng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:view_applications',
        description: 'Xem h·ªì s∆° ·ª©ng tuy·ªÉn',
        metaTitle: 'Quy·ªÅn xem h·ªì s∆° ·ª©ng tuy·ªÉn',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt h·ªì s∆° ·ª©ng tuy·ªÉn'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'recruitment:manage_applications',
        description: 'Qu·∫£n l√Ω h·ªì s∆° ·ª©ng tuy·ªÉn',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω h·ªì s∆° ·ª©ng tuy·ªÉn',
        metaDescription: 'Cho ph√©p thay ƒë·ªïi tr·∫°ng th√°i v√† qu·∫£n l√Ω h·ªì s∆° ·ª©ng tuy·ªÉn'
      }
    }),

    // ========== SERVICE MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'services:create',
        description: 'T·∫°o d·ªãch v·ª•',
        metaTitle: 'Quy·ªÅn t·∫°o d·ªãch v·ª•',
        metaDescription: 'Cho ph√©p t·∫°o d·ªãch v·ª• m·ªõi'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'services:read',
        description: 'Xem d·ªãch v·ª•',
        metaTitle: 'Quy·ªÅn xem d·ªãch v·ª•',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt d·ªãch v·ª•'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'services:update',
        description: 'C·∫≠p nh·∫≠t d·ªãch v·ª•',
        metaTitle: 'Quy·ªÅn ch·ªânh s·ª≠a d·ªãch v·ª•',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin d·ªãch v·ª•'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'services:delete',
        description: 'X√≥a d·ªãch v·ª•',
        metaTitle: 'Quy·ªÅn x√≥a d·ªãch v·ª•',
        metaDescription: 'Cho ph√©p x√≥a d·ªãch v·ª• kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'services:manage_all',
        description: 'Qu·∫£n l√Ω to√†n b·ªô d·ªãch v·ª•',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω to√†n b·ªô d·ªãch v·ª•',
        metaDescription: 'Quy·ªÅn cao nh·∫•t trong qu·∫£n l√Ω d·ªãch v·ª•'
      }
    }),

    // ========== CONTACT MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'contacts:read',
        description: 'Xem li√™n h·ªá',
        metaTitle: 'Quy·ªÅn xem li√™n h·ªá',
        metaDescription: 'Cho ph√©p xem danh s√°ch v√† chi ti·∫øt form li√™n h·ªá'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'contacts:update',
        description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i li√™n h·ªá',
        metaTitle: 'Quy·ªÅn c·∫≠p nh·∫≠t li√™n h·ªá',
        metaDescription: 'Cho ph√©p thay ƒë·ªïi tr·∫°ng th√°i x·ª≠ l√Ω li√™n h·ªá'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'contacts:delete',
        description: 'X√≥a li√™n h·ªá',
        metaTitle: 'Quy·ªÅn x√≥a li√™n h·ªá',
        metaDescription: 'Cho ph√©p x√≥a form li√™n h·ªá kh·ªèi h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'contacts:respond',
        description: 'Ph·∫£n h·ªìi li√™n h·ªá',
        metaTitle: 'Quy·ªÅn ph·∫£n h·ªìi li√™n h·ªá',
        metaDescription: 'Cho ph√©p g·ª≠i email ph·∫£n h·ªìi cho kh√°ch h√†ng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'contacts:export',
        description: 'Xu·∫•t d·ªØ li·ªáu li√™n h·ªá',
        metaTitle: 'Quy·ªÅn xu·∫•t d·ªØ li·ªáu li√™n h·ªá',
        metaDescription: 'Cho ph√©p xu·∫•t danh s√°ch li√™n h·ªá ra file Excel/CSV'
      }
    }),

    // ========== NEWSLETTER PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'newsletter:read',
        description: 'Xem danh s√°ch ƒëƒÉng k√Ω newsletter',
        metaTitle: 'Quy·ªÅn xem newsletter',
        metaDescription: 'Cho ph√©p xem danh s√°ch email ƒëƒÉng k√Ω nh·∫≠n tin'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'newsletter:manage',
        description: 'Qu·∫£n l√Ω newsletter',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω newsletter',
        metaDescription: 'Cho ph√©p g·ª≠i email v√† qu·∫£n l√Ω danh s√°ch newsletter'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'newsletter:send',
        description: 'G·ª≠i email newsletter',
        metaTitle: 'Quy·ªÅn g·ª≠i newsletter',
        metaDescription: 'Cho ph√©p g·ª≠i email newsletter ƒë·∫øn danh s√°ch ƒëƒÉng k√Ω'
      }
    }),

    // ========== ANALYTICS & REPORTS PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'analytics:view_basic',
        description: 'Xem b√°o c√°o c∆° b·∫£n',
        metaTitle: 'Quy·ªÅn xem analytics c∆° b·∫£n',
        metaDescription: 'Cho ph√©p xem b√°o c√°o th·ªëng k√™ c∆° b·∫£n c·ªßa h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'analytics:view_advanced',
        description: 'Xem b√°o c√°o chi ti·∫øt',
        metaTitle: 'Quy·ªÅn xem analytics chi ti·∫øt',
        metaDescription: 'Cho ph√©p xem b√°o c√°o th·ªëng k√™ chi ti·∫øt v√† ph√¢n t√≠ch n√¢ng cao'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'analytics:export',
        description: 'Xu·∫•t b√°o c√°o',
        metaTitle: 'Quy·ªÅn xu·∫•t b√°o c√°o',
        metaDescription: 'Cho ph√©p xu·∫•t b√°o c√°o th·ªëng k√™ ra file Excel/PDF'
      }
    }),

    // ========== SETTINGS MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'settings:read',
        description: 'Xem c√†i ƒë·∫∑t',
        metaTitle: 'Quy·ªÅn xem c√†i ƒë·∫∑t',
        metaDescription: 'Cho ph√©p xem c√°c c√†i ƒë·∫∑t h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'settings:update',
        description: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t',
        metaTitle: 'Quy·ªÅn c·∫≠p nh·∫≠t c√†i ƒë·∫∑t',
        metaDescription: 'Cho ph√©p thay ƒë·ªïi c√†i ƒë·∫∑t h·ªá th·ªëng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'settings:manage_seo',
        description: 'Qu·∫£n l√Ω c√†i ƒë·∫∑t SEO',
        metaTitle: 'Quy·ªÅn qu·∫£n l√Ω SEO',
        metaDescription: 'Cho ph√©p c·∫•u h√¨nh c√°c th√¥ng s·ªë SEO c·ªßa website'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'settings:manage_general',
        description: 'Qu·∫£n l√Ω c√†i ƒë·∫∑t chung',
        metaTitle: 'Quy·ªÅn c√†i ƒë·∫∑t chung',
        metaDescription: 'Cho ph√©p thay ƒë·ªïi c√†i ƒë·∫∑t chung c·ªßa website'
      }
    }),

    // ========== STATUS MANAGEMENT PERMISSIONS ==========
    prisma.permission.create({
      data: {
        name: 'status:create',
        description: 'T·∫°o tr·∫°ng th√°i m·ªõi',
        metaTitle: 'Quy·ªÅn t·∫°o tr·∫°ng th√°i',
        metaDescription: 'Cho ph√©p t·∫°o tr·∫°ng th√°i m·ªõi cho c√°c ƒë·ªëi t∆∞·ª£ng'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'status:read',
        description: 'Xem tr·∫°ng th√°i',
        metaTitle: 'Quy·ªÅn xem tr·∫°ng th√°i',
        metaDescription: 'Cho ph√©p xem danh s√°ch tr·∫°ng th√°i'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'status:update',
        description: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i',
        metaTitle: 'Quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i',
        metaDescription: 'Cho ph√©p ch·ªânh s·ª≠a th√¥ng tin tr·∫°ng th√°i'
      }
    }),
    prisma.permission.create({
      data: {
        name: 'status:delete',
        description: 'X√≥a tr·∫°ng th√°i',
        metaTitle: 'Quy·ªÅn x√≥a tr·∫°ng th√°i',
        metaDescription: 'Cho ph√©p x√≥a tr·∫°ng th√°i kh·ªèi h·ªá th·ªëng'
      }
    }),
  ]);

  console.log(`‚úÖ ƒê√£ t·∫°o ${permissions.length} permissions`);
  console.log('üëë T·∫°o Roles...');
  
  // T·∫°o Super Admin Role
  const superAdminRole = await prisma.role.create({
    data: {
      name: 'Super Administrator',
      description: 'Qu·∫£n tr·ªã vi√™n c·∫•p cao nh·∫•t v·ªõi to√†n quy·ªÅn h·ªá th·ªëng',
      metaTitle: 'Vai tr√≤ Super Administrator',
      metaDescription: 'Vai tr√≤ c√≥ quy·ªÅn cao nh·∫•t, c√≥ th·ªÉ th·ª±c hi·ªán m·ªçi h√†nh ƒë·ªông trong h·ªá th·ªëng',
      permissions: {
        connect: [
          { name: 'admin:full_access' },
        ]
      }
    }
  });

  // T·∫°o Administrator Role
  const adminRole = await prisma.role.create({
    data: {
      name: 'Administrator',
      description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v·ªõi quy·ªÅn qu·∫£n l√Ω cao',
      metaTitle: 'Vai tr√≤ Administrator',
      metaDescription: 'Vai tr√≤ qu·∫£n tr·ªã vi√™n v·ªõi quy·ªÅn qu·∫£n l√Ω h·∫ßu h·∫øt c√°c ch·ª©c nƒÉng h·ªá th·ªëng',
      permissions: {
        connect: [
          // System permissions
          { name: 'admin:system_settings' },
          { name: 'admin:view_logs' },
          { name: 'admin:manage_sessions' },
          
          // User management
          { name: 'users:create' },
          { name: 'users:read' },
          { name: 'users:update' },
          { name: 'users:delete' },
          { name: 'users:manage_all' },
          { name: 'users:view_profile' },
          { name: 'users:reset_password' },
          
          // Role management
          { name: 'roles:create' },
          { name: 'roles:read' },
          { name: 'roles:update' },
          { name: 'roles:delete' },
          { name: 'roles:assign_permissions' },
          { name: 'roles:assign_to_users' },
          
          // Permission management
          { name: 'permissions:read' },
          { name: 'permissions:manage' },
          
          // Content management
          { name: 'blogs:create' },
          { name: 'blogs:read' },
          { name: 'blogs:update' },
          { name: 'blogs:delete' },
          { name: 'blogs:publish' },
          { name: 'blogs:unpublish' },
          { name: 'blogs:manage_all' },
          { name: 'blogs:moderate' },
          { name: 'blogs:view_drafts' },
          { name: 'blogs:schedule' },
          
          // Category & Tag management
          { name: 'categories:create' },
          { name: 'categories:read' },
          { name: 'categories:update' },
          { name: 'categories:delete' },
          { name: 'categories:manage_hierarchy' },
          { name: 'tags:create' },
          { name: 'tags:read' },
          { name: 'tags:update' },
          { name: 'tags:delete' },
          
          // Media management
          { name: 'media:upload' },
          { name: 'media:read' },
          { name: 'media:update' },
          { name: 'media:delete' },
          { name: 'media:manage_all' },
          { name: 'media:organize' },
          
          // Comment management
          { name: 'comments:create' },
          { name: 'comments:read' },
          { name: 'comments:update' },
          { name: 'comments:delete' },
          { name: 'comments:moderate' },
          { name: 'comments:approve' },
          
          // Recruitment management
          { name: 'recruitment:create' },
          { name: 'recruitment:read' },
          { name: 'recruitment:update' },
          { name: 'recruitment:delete' },
          { name: 'recruitment:publish' },
          { name: 'recruitment:manage_all' },
          { name: 'recruitment:view_applications' },
          { name: 'recruitment:manage_applications' },
          
          // Service management
          { name: 'services:create' },
          { name: 'services:read' },
          { name: 'services:update' },
          { name: 'services:delete' },
          { name: 'services:manage_all' },
          
          // Contact & Newsletter
          { name: 'contacts:read' },
          { name: 'contacts:update' },
          { name: 'contacts:delete' },
          { name: 'contacts:respond' },
          { name: 'contacts:export' },
          { name: 'newsletter:read' },
          { name: 'newsletter:manage' },
          { name: 'newsletter:send' },
          
          // Analytics & Settings
          { name: 'analytics:view_basic' },
          { name: 'analytics:view_advanced' },
          { name: 'analytics:export' },
          { name: 'settings:read' },
          { name: 'settings:update' },
          { name: 'settings:manage_seo' },
          { name: 'settings:manage_general' },
          
          // Status management
          { name: 'status:create' },
          { name: 'status:read' },
          { name: 'status:update' },
          { name: 'status:delete' },
        ]
      }
    }
  });

  // T·∫°o HR Manager Role
  const hrManagerRole = await prisma.role.create({
    data: {
      name: 'HR Manager',
      description: 'Qu·∫£n l√Ω nh√¢n s·ª± chuy√™n v·ªÅ tuy·ªÉn d·ª•ng',
      metaTitle: 'Vai tr√≤ HR Manager',
      metaDescription: 'Vai tr√≤ qu·∫£n l√Ω nh√¢n s·ª± v·ªõi quy·ªÅn qu·∫£n l√Ω tuy·ªÉn d·ª•ng v√† ·ª©ng vi√™n',
      permissions: {
        connect: [
          // User management (limited)
          { name: 'users:read' },
          { name: 'users:view_profile' },
          
          // Recruitment management (full)
          { name: 'recruitment:create' },
          { name: 'recruitment:read' },
          { name: 'recruitment:update' },
          { name: 'recruitment:delete' },
          { name: 'recruitment:publish' },
          { name: 'recruitment:manage_all' },
          { name: 'recruitment:view_applications' },
          { name: 'recruitment:manage_applications' },
          
          // Category management (for recruitment)
          { name: 'categories:read' },
          { name: 'categories:create' },
          { name: 'categories:update' },
          
          // Contact management
          { name: 'contacts:read' },
          { name: 'contacts:update' },
          { name: 'contacts:respond' },
          { name: 'contacts:export' },
          
          // Analytics (basic)
          { name: 'analytics:view_basic' },
          
          // Media (basic)
          { name: 'media:upload' },
          { name: 'media:read' },
          { name: 'media:update' },
        ]
      }
    }
  });

  // T·∫°o Editor Role
  const editorRole = await prisma.role.create({
    data: {
      name: 'Editor',
      description: 'Bi√™n t·∫≠p vi√™n qu·∫£n l√Ω n·ªôi dung blog v√† d·ªãch v·ª•',
      metaTitle: 'Vai tr√≤ Editor',
      metaDescription: 'Vai tr√≤ chuy√™n qu·∫£n l√Ω n·ªôi dung, blog v√† d·ªãch v·ª• c·ªßa website',
      permissions: {
        connect: [
          // Blog management
          { name: 'blogs:create' },
          { name: 'blogs:read' },
          { name: 'blogs:update' },
          { name: 'blogs:delete' },
          { name: 'blogs:publish' },
          { name: 'blogs:unpublish' },
          { name: 'blogs:view_drafts' },
          { name: 'blogs:schedule' },
          
          // Category & Tag management
          { name: 'categories:create' },
          { name: 'categories:read' },
          { name: 'categories:update' },
          { name: 'categories:manage_hierarchy' },
          { name: 'tags:create' },
          { name: 'tags:read' },
          { name: 'tags:update' },
          { name: 'tags:delete' },
          
          // Media management
          { name: 'media:upload' },
          { name: 'media:read' },
          { name: 'media:update' },
          { name: 'media:organize' },
          
          // Comment management
          { name: 'comments:read' },
          { name: 'comments:moderate' },
          { name: 'comments:approve' },
          
          // Service management
          { name: 'services:create' },
          { name: 'services:read' },
          { name: 'services:update' },
          { name: 'services:delete' },
          
          // Basic permissions
          { name: 'users:update_own_profile' },
          { name: 'users:change_password' },
          
          // Analytics (basic)
          { name: 'analytics:view_basic' },
        ]
      }
    }
  });

  // T·∫°o Moderator Role
  const moderatorRole = await prisma.role.create({
    data: {
      name: 'Moderator',
      description: 'Ng∆∞·ªùi ki·ªÉm duy·ªát n·ªôi dung v√† qu·∫£n l√Ω b√¨nh lu·∫≠n',
      metaTitle: 'Vai tr√≤ Moderator',
      metaDescription: 'Vai tr√≤ ki·ªÉm duy·ªát n·ªôi dung v√† x·ª≠ l√Ω b√¨nh lu·∫≠n t·ª´ ng∆∞·ªùi d√πng',
      permissions: {
        connect: [
          // Basic user management
          { name: 'users:read' },
          { name: 'users:view_profile' },
          { name: 'users:update_own_profile' },
          { name: 'users:change_password' },
          
          // Blog management (limited)
          { name: 'blogs:read' },
          { name: 'blogs:update' },
          { name: 'blogs:moderate' },
          { name: 'blogs:view_drafts' },
          
          // Comment management (full)
          { name: 'comments:create' },
          { name: 'comments:read' },
          { name: 'comments:update' },
          { name: 'comments:delete' },
          { name: 'comments:moderate' },
          { name: 'comments:approve' },
          
          // Category & Tag (read only)
          { name: 'categories:read' },
          { name: 'tags:read' },
          
          // Media (basic)
          { name: 'media:read' },
          { name: 'media:upload' },
          
          // Contact management
          { name: 'contacts:read' },
          { name: 'contacts:update' },
          { name: 'contacts:respond' },
        ]
      }
    }
  });

  // T·∫°o Author Role
  const authorRole = await prisma.role.create({
    data: {
      name: 'Author',
      description: 'T√°c gi·∫£ vi·∫øt b√†i v√† qu·∫£n l√Ω n·ªôi dung c√° nh√¢n',
      metaTitle: 'Vai tr√≤ Author',
      metaDescription: 'Vai tr√≤ d√†nh cho c√°c t√°c gi·∫£ vi·∫øt b√†i v√† qu·∫£n l√Ω n·ªôi dung c·ªßa m√¨nh',
      permissions: {
        connect: [
          // Basic user management
          { name: 'users:update_own_profile' },
          { name: 'users:change_password' },
          { name: 'users:view_profile' },
          
          // Blog management (own content)
          { name: 'blogs:create' },
          { name: 'blogs:read' },
          { name: 'blogs:update' },
          { name: 'blogs:view_drafts' },
          
          // Comment management (limited)
          { name: 'comments:create' },
          { name: 'comments:read' },
          { name: 'comments:update' },
          
          // Category & Tag (read + create)
          { name: 'categories:read' },
          { name: 'tags:read' },
          { name: 'tags:create' },
          
          // Media management (own)
          { name: 'media:upload' },
          { name: 'media:read' },
          { name: 'media:update' },
        ]
      }
    }
  });

  // T·∫°o User Role
  const userRole = await prisma.role.create({
    data: {
      name: 'User',
      description: 'Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng',
      metaTitle: 'Vai tr√≤ User',
      metaDescription: 'Vai tr√≤ c∆° b·∫£n cho ng∆∞·ªùi d√πng ƒëƒÉng k√Ω t√†i kho·∫£n',
      permissions: {
        connect: [
          // Basic permissions
          { name: 'users:update_own_profile' },
          { name: 'users:change_password' },
          
          // Read permissions
          { name: 'blogs:read' },
          { name: 'categories:read' },
          { name: 'tags:read' },
          { name: 'services:read' },
          
          // Comment permissions
          { name: 'comments:create' },
          { name: 'comments:read' },
          { name: 'comments:update' }, // Only own comments
        ]
      }
    }
  });

  console.log(`‚úÖ ƒê√£ t·∫°o 7 roles: Super Admin, Admin, HR Manager, Editor, Moderator, Author, User`);

  console.log('üìä T·∫°o Status...');
  
  // T·∫°o status cho c√°c entities
  const statuses = await Promise.all([
    // Blog statuses
    prisma.status.create({
      data: {
        name: 'Draft',
        description: 'B√†i vi·∫øt ƒëang so·∫°n th·∫£o',
        type: 'blog',
        metaTitle: 'Tr·∫°ng th√°i B·∫£n nh√°p',
        metaDescription: 'B√†i vi·∫øt ƒëang ƒë∆∞·ª£c so·∫°n th·∫£o, ch∆∞a xu·∫•t b·∫£n'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Published',
        description: 'B√†i vi·∫øt ƒë√£ xu·∫•t b·∫£n',
        type: 'blog',
        metaTitle: 'Tr·∫°ng th√°i ƒê√£ xu·∫•t b·∫£n',
        metaDescription: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n v√† hi·ªÉn th·ªã c√¥ng khai'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Archived',
        description: 'B√†i vi·∫øt ƒë√£ l∆∞u tr·ªØ',
        type: 'blog',
        metaTitle: 'Tr·∫°ng th√°i L∆∞u tr·ªØ',
        metaDescription: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ, kh√¥ng hi·ªÉn th·ªã c√¥ng khai'
      }
    }),

    // Service statuses
    prisma.status.create({
      data: {
        name: 'Active',
        description: 'D·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông',
        type: 'service',
        metaTitle: 'Tr·∫°ng th√°i Ho·∫°t ƒë·ªông',
        metaDescription: 'D·ªãch v·ª• ƒëang ƒë∆∞·ª£c cung c·∫•p'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Inactive',
        description: 'D·ªãch v·ª• t·∫°m ng∆∞ng',
        type: 'service',
        metaTitle: 'Tr·∫°ng th√°i T·∫°m ng∆∞ng',
        metaDescription: 'D·ªãch v·ª• t·∫°m th·ªùi ng∆∞ng cung c·∫•p'
      }
    }),

    // Contact statuses
    prisma.status.create({
      data: {
        name: 'New',
        description: 'Li√™n h·ªá m·ªõi',
        type: 'contact',
        metaTitle: 'Tr·∫°ng th√°i M·ªõi',
        metaDescription: 'Li√™n h·ªá m·ªõi ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω'
      }
    }),
    prisma.status.create({
      data: {
        name: 'In Progress',
        description: 'ƒêang x·ª≠ l√Ω',
        type: 'contact',
        metaTitle: 'Tr·∫°ng th√°i ƒêang x·ª≠ l√Ω',
        metaDescription: 'Li√™n h·ªá ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Resolved',
        description: 'ƒê√£ gi·∫£i quy·∫øt',
        type: 'contact',
        metaTitle: 'Tr·∫°ng th√°i ƒê√£ gi·∫£i quy·∫øt',
        metaDescription: 'Li√™n h·ªá ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt xong'
      }
    }),

    // Recruitment statuses
    prisma.status.create({
      data: {
        name: 'Open',
        description: 'ƒêang tuy·ªÉn d·ª•ng',
        type: 'recruitment',
        metaTitle: 'Tr·∫°ng th√°i ƒêang tuy·ªÉn',
        metaDescription: 'V·ªã tr√≠ ƒëang m·ªü ƒë·ªÉ tuy·ªÉn d·ª•ng'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Closed',
        description: 'ƒê√£ ƒë√≥ng tuy·ªÉn d·ª•ng',
        type: 'recruitment',
        metaTitle: 'Tr·∫°ng th√°i ƒê√£ ƒë√≥ng',
        metaDescription: 'V·ªã tr√≠ ƒë√£ ƒë√≥ng, kh√¥ng nh·∫≠n ·ª©ng vi√™n'
      }
    }),

    // Job Application statuses
    prisma.status.create({
      data: {
        name: 'Applied',
        description: 'ƒê√£ ·ª©ng tuy·ªÉn',
        type: 'application',
        metaTitle: 'Tr·∫°ng th√°i ƒê√£ ·ª©ng tuy·ªÉn',
        metaDescription: 'H·ªì s∆° ƒë√£ ƒë∆∞·ª£c n·ªôp'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Under Review',
        description: 'ƒêang xem x√©t',
        type: 'application',
        metaTitle: 'Tr·∫°ng th√°i ƒêang xem x√©t',
        metaDescription: 'H·ªì s∆° ƒëang ƒë∆∞·ª£c xem x√©t'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Accepted',
        description: 'ƒê∆∞·ª£c ch·∫•p nh·∫≠n',
        type: 'application',
        metaTitle: 'Tr·∫°ng th√°i ƒê∆∞·ª£c ch·∫•p nh·∫≠n',
        metaDescription: 'H·ªì s∆° ƒë∆∞·ª£c ch·∫•p nh·∫≠n'
      }
    }),
    prisma.status.create({
      data: {
        name: 'Rejected',
        description: 'B·ªã t·ª´ ch·ªëi',
        type: 'application',
        metaTitle: 'Tr·∫°ng th√°i B·ªã t·ª´ ch·ªëi',
        metaDescription: 'H·ªì s∆° b·ªã t·ª´ ch·ªëi'
      }
    }),
  ]);

  console.log(`‚úÖ ƒê√£ t·∫°o ${statuses.length} statuses`);

  console.log('üìÇ T·∫°o Categories...');
  
  // T·∫°o categories
  const categories = await Promise.all([
    // Blog categories
    prisma.category.create({
      data: {
        name: 'C√¥ng ngh·ªá',
        slug: 'cong-nghe',
        description: 'C√°c b√†i vi·∫øt v·ªÅ c√¥ng ngh·ªá, l·∫≠p tr√¨nh, AI',
        type: 'blog',
        metaTitle: 'Danh m·ª•c C√¥ng ngh·ªá',
        metaDescription: 'T·ªïng h·ª£p c√°c b√†i vi·∫øt v·ªÅ c√¥ng ngh·ªá m·ªõi, l·∫≠p tr√¨nh v√† tr√≠ tu·ªá nh√¢n t·∫°o'
      }
    }),
    prisma.category.create({
      data: {
        name: 'Kinh doanh',
        slug: 'kinh-doanh',
        description: 'C√°c b√†i vi·∫øt v·ªÅ kinh doanh, kh·ªüi nghi·ªáp, marketing',
        type: 'blog',
        metaTitle: 'Danh m·ª•c Kinh doanh',
        metaDescription: 'Chia s·∫ª kinh nghi·ªám kinh doanh, kh·ªüi nghi·ªáp v√† chi·∫øn l∆∞·ª£c marketing'
      }
    }),
    prisma.category.create({
      data: {
        name: 'ƒê·ªùi s·ªëng',
        slug: 'doi-song',
        description: 'C√°c b√†i vi·∫øt v·ªÅ cu·ªôc s·ªëng, s·ª©c kh·ªèe, du l·ªãch',
        type: 'blog',
        metaTitle: 'Danh m·ª•c ƒê·ªùi s·ªëng',
        metaDescription: 'Nh·ªØng c√¢u chuy·ªán v·ªÅ cu·ªôc s·ªëng, m·∫πo s·ª©c kh·ªèe v√† tr·∫£i nghi·ªám du l·ªãch'
      }
    }),

    // Service categories
    prisma.category.create({
      data: {
        name: 'Ph√°t tri·ªÉn Web',
        slug: 'phat-trien-web',
        description: 'D·ªãch v·ª• thi·∫øt k·∫ø v√† ph√°t tri·ªÉn website',
        type: 'service',
        metaTitle: 'D·ªãch v·ª• Ph√°t tri·ªÉn Web',
        metaDescription: 'Cung c·∫•p d·ªãch v·ª• thi·∫øt k·∫ø, ph√°t tri·ªÉn website chuy√™n nghi·ªáp'
      }
    }),
    prisma.category.create({
      data: {
        name: '·ª®ng d·ª•ng Mobile',
        slug: 'ung-dung-mobile',
        description: 'D·ªãch v·ª• ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông',
        type: 'service',
        metaTitle: 'D·ªãch v·ª• ·ª®ng d·ª•ng Mobile',
        metaDescription: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng iOS, Android chuy√™n nghi·ªáp'
      }
    }),
    prisma.category.create({
      data: {
        name: 'T∆∞ v·∫•n IT',
        slug: 'tu-van-it',
        description: 'D·ªãch v·ª• t∆∞ v·∫•n c√¥ng ngh·ªá th√¥ng tin',
        type: 'service',
        metaTitle: 'D·ªãch v·ª• T∆∞ v·∫•n IT',
        metaDescription: 'T∆∞ v·∫•n gi·∫£i ph√°p c√¥ng ngh·ªá th√¥ng tin cho doanh nghi·ªáp'
      }
    }),

    // Recruitment categories
    prisma.category.create({
      data: {
        name: 'IT - Ph·∫ßn m·ªÅm',
        slug: 'it-phan-mem',
        description: 'V·ªã tr√≠ tuy·ªÉn d·ª•ng trong lƒ©nh v·ª±c IT v√† ph·∫ßn m·ªÅm',
        type: 'recruitment',
        metaTitle: 'Tuy·ªÉn d·ª•ng IT - Ph·∫ßn m·ªÅm',
        metaDescription: 'C√°c v·ªã tr√≠ vi·ªác l√†m trong lƒ©nh v·ª±c c√¥ng ngh·ªá th√¥ng tin v√† ph·∫ßn m·ªÅm'
      }
    }),
    prisma.category.create({
      data: {
        name: 'Marketing - Sales',
        slug: 'marketing-sales',
        description: 'V·ªã tr√≠ tuy·ªÉn d·ª•ng Marketing v√† B√°n h√†ng',
        type: 'recruitment',
        metaTitle: 'Tuy·ªÉn d·ª•ng Marketing - Sales',
        metaDescription: 'C∆° h·ªôi ngh·ªÅ nghi·ªáp trong lƒ©nh v·ª±c marketing v√† b√°n h√†ng'
      }
    }),
    prisma.category.create({
      data: {
        name: 'Thi·∫øt k·∫ø - S√°ng t·∫°o',
        slug: 'thiet-ke-sang-tao',
        description: 'V·ªã tr√≠ tuy·ªÉn d·ª•ng Thi·∫øt k·∫ø v√† S√°ng t·∫°o',
        type: 'recruitment',
        metaTitle: 'Tuy·ªÉn d·ª•ng Thi·∫øt k·∫ø - S√°ng t·∫°o',
        metaDescription: 'Vi·ªác l√†m d√†nh cho c√°c nh√† thi·∫øt k·∫ø v√† ng∆∞·ªùi s√°ng t·∫°o'
      }
    }),
  ]);

  console.log(`‚úÖ ƒê√£ t·∫°o ${categories.length} categories`);

  console.log('üè∑Ô∏è T·∫°o Tags...');
  
  // T·∫°o tags
  const tags = await Promise.all([
    prisma.tag.create({
      data: {
        name: 'JavaScript',
        slug: 'javascript',
        metaTitle: 'Tag JavaScript',
        metaDescription: 'B√†i vi·∫øt v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh JavaScript'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'React',
        slug: 'react',
        metaTitle: 'Tag React',
        metaDescription: 'Th∆∞ vi·ªán React cho ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'Node.js',
        slug: 'nodejs',
        metaTitle: 'Tag Node.js',
        metaDescription: 'N·ªÅn t·∫£ng Node.js cho ph√°t tri·ªÉn backend'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'TypeScript',
        slug: 'typescript',
        metaTitle: 'Tag TypeScript',
        metaDescription: 'Ng√¥n ng·ªØ TypeScript m·ªü r·ªông t·ª´ JavaScript'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'AI',
        slug: 'ai',
        metaTitle: 'Tag AI',
        metaDescription: 'Tr√≠ tu·ªá nh√¢n t·∫°o v√† machine learning'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'Startup',
        slug: 'startup',
        metaTitle: 'Tag Startup',
        metaDescription: 'Kh·ªüi nghi·ªáp v√† x√¢y d·ª±ng doanh nghi·ªáp'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'Marketing',
        slug: 'marketing',
        metaTitle: 'Tag Marketing',
        metaDescription: 'Chi·∫øn l∆∞·ª£c v√† k·ªπ thu·∫≠t marketing'
      }
    }),
    prisma.tag.create({
      data: {
        name: 'Design',
        slug: 'design',
        metaTitle: 'Tag Design',
        metaDescription: 'Thi·∫øt k·∫ø UI/UX v√† ƒë·ªì h·ªça'
      }
    }),
  ]);

  console.log(`‚úÖ ƒê√£ t·∫°o ${tags.length} tags`);

  console.log('üë§ T·∫°o User ch√≠nh...');
  
  // Hash password cho user ch√≠nh
  const hashedPassword = await bcrypt.hash('RachelCu.26112020', 10);
  
  // T·∫°o user ch√≠nh
  const mainUser = await prisma.user.create({
    data: {
      email: 'thang.ph2146@gmail.com',      name: 'Ph·∫°m Ho√†ng Th·∫Øng',
      hashedPassword: hashedPassword,
      emailVerified: new Date(),
      roleId: superAdminRole.id,
      metaTitle: 'Qu·∫£n tr·ªã vi√™n ch√≠nh',
      metaDescription: 'T√†i kho·∫£n qu·∫£n tr·ªã vi√™n ch√≠nh c·ªßa h·ªá th·ªëng',
      avatarUrl: 'https://ui-avatars.com/api/?name=Pham+Hoang+Thang&background=6366f1&color=ffffff&size=200',
      profile: {
        create: {
          bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v√† nh√† ph√°t tri·ªÉn full-stack v·ªõi h∆°n 5 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c c√¥ng ngh·ªá.',
          avatarUrl: 'https://ui-avatars.com/api/?name=Pham+Hoang+Thang&background=6366f1&color=ffffff&size=200',
          socialLinks: {
            github: 'https://github.com/thangph',
            linkedin: 'https://linkedin.com/in/thangph',
            facebook: 'https://facebook.com/thangph2146'
          },
          metaTitle: 'Profile Ph·∫°m Ho√†ng Th·∫Øng',
          metaDescription: 'Th√¥ng tin c√° nh√¢n c·ªßa qu·∫£n tr·ªã vi√™n h·ªá th·ªëng'
        }
      }
    }
  });

  console.log(`‚úÖ ƒê√£ t·∫°o user ch√≠nh: ${mainUser.email}`);

  console.log('üë• T·∫°o m·ªôt s·ªë User m·∫´u...');
    // T·∫°o m·ªôt s·ªë user m·∫´u
  const sampleUsers = await Promise.all([
    // Admin user
    prisma.user.create({
      data: {
        email: 'admin@example.com',
        name: 'Nguy·ªÖn VƒÉn Qu·∫£n',
        hashedPassword: await bcrypt.hash('admin123', 10),
        emailVerified: new Date(),
        roleId: adminRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Quan&background=dc2626&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v·ªõi kinh nghi·ªám qu·∫£n l√Ω nhi·ªÅu nƒÉm.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Quan&background=dc2626&color=ffffff&size=200',
            socialLinks: {
              linkedin: 'https://linkedin.com/in/nguyenvanquan'
            }
          }
        }
      }
    }),
    
    // HR Manager user
    prisma.user.create({
      data: {
        email: 'hr@example.com',
        name: 'Tr·∫ßn Th·ªã Nh√¢n',
        hashedPassword: await bcrypt.hash('hr123', 10),
        emailVerified: new Date(),
        roleId: hrManagerRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Nhan&background=0ea5e9&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'Chuy√™n gia nh√¢n s·ª± v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám tuy·ªÉn d·ª•ng.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Nhan&background=0ea5e9&color=ffffff&size=200',
            socialLinks: {
              linkedin: 'https://linkedin.com/in/tranthinha'
            }
          }
        }
      }
    }),
    
    // Editor user
    prisma.user.create({
      data: {
        email: 'editor@example.com',
        name: 'Nguy·ªÖn VƒÉn Bi√™n',
        hashedPassword: await bcrypt.hash('editor123', 10),
        emailVerified: new Date(),
        roleId: editorRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Bien&background=10b981&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'Bi√™n t·∫≠p vi√™n chuy√™n v·ªÅ n·ªôi dung c√¥ng ngh·ªá v√† kinh doanh.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Bien&background=10b981&color=ffffff&size=200',
            socialLinks: {
              twitter: 'https://twitter.com/nguyenvanbien',
              linkedin: 'https://linkedin.com/in/nguyenvanbien'
            }
          }
        }
      }
    }),
    
    // Moderator user
    prisma.user.create({
      data: {
        email: 'moderator@example.com',
        name: 'Tr·∫ßn Th·ªã Ki·ªÉm',
        hashedPassword: await bcrypt.hash('moderator123', 10),
        emailVerified: new Date(),
        roleId: moderatorRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Kiem&background=f59e0b&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'Ki·ªÉm duy·ªát vi√™n n·ªôi dung v√† qu·∫£n l√Ω c·ªông ƒë·ªìng.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Kiem&background=f59e0b&color=ffffff&size=200'
          }
        }
      }
    }),
    
    // Author user
    prisma.user.create({
      data: {
        email: 'author@example.com',
        name: 'L√™ VƒÉn Vi·∫øt',
        hashedPassword: await bcrypt.hash('author123', 10),
        emailVerified: new Date(),
        roleId: authorRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Le+Van+Viet&background=7c3aed&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'T√°c gi·∫£ chuy√™n vi·∫øt v·ªÅ c√¥ng ngh·ªá v√† ƒë·ªùi s·ªëng.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Le+Van+Viet&background=7c3aed&color=ffffff&size=200',
            socialLinks: {
              website: 'https://levanviet.com',
              twitter: 'https://twitter.com/levanviet'
            }
          }
        }
      }
    }),
    
    // Regular user
    prisma.user.create({
      data: {
        email: 'user@example.com',
        name: 'L√™ VƒÉn D√πng',
        hashedPassword: await bcrypt.hash('user123', 10),
        emailVerified: new Date(),
        roleId: userRole.id,
        avatarUrl: 'https://ui-avatars.com/api/?name=Le+Van+Dung&background=8b5cf6&color=ffffff&size=200',
        profile: {
          create: {
            bio: 'Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng quan t√¢m ƒë·∫øn c√¥ng ngh·ªá.',
            avatarUrl: 'https://ui-avatars.com/api/?name=Le+Van+Dung&background=8b5cf6&color=ffffff&size=200'
          }
        }
      }
    }),
  ]);
  console.log(`‚úÖ ƒê√£ t·∫°o ${sampleUsers.length} user m·∫´u`);

  console.log('üåü Ho√†n th√†nh seed database!');
  console.log('\nüìã T√≥m t·∫Øt d·ªØ li·ªáu ƒë√£ t·∫°o:');
  console.log(`- ${permissions.length} Permissions (ƒë·∫ßy ƒë·ªß cho t·∫•t c·∫£ API)`);
  console.log(`- 7 Roles (Super Admin, Admin, HR Manager, Editor, Moderator, Author, User)`);
  console.log(`- ${statuses.length} Statuses`);
  console.log(`- ${categories.length} Categories`);
  console.log(`- ${tags.length} Tags`);
  console.log(`- ${sampleUsers.length + 1} Users`);
  console.log('\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p:');
  console.log('üéØ SUPER ADMIN:');
  console.log('  üìß Email: thang.ph2146@gmail.com');
  console.log('  üîí Password: RachelCu.26112020');
  console.log('  üëë Role: Super Administrator (To√†n quy·ªÅn)');
  console.log('\nüéØ C√ÅC T√ÄI KHO·∫¢N TEST:');
  console.log('  üìß admin@example.com | üîí admin123 | üëë Administrator');
  console.log('  üìß hr@example.com | üîí hr123 | üë§ HR Manager');
  console.log('  üìß editor@example.com | üîí editor123 | ‚úèÔ∏è Editor');
  console.log('  üìß moderator@example.com | üîí moderator123 | üõ°Ô∏è Moderator');
  console.log('  üìß author@example.com | üîí author123 | üìù Author');
  console.log('  üìß user@example.com | üîí user123 | üë§ User');
}

main()
  .catch((e) => {
    console.error('‚ùå L·ªói khi seed database:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
